What is Django?
- A web application framework built with Python that allows us to easily create dynamic web apps using Python.
- It helps with all the server side things (requests, authentication, etc.)

Django documentation is also really good and details, with examples and tutorials for many of the answers

1. Make sure django is installed on your computer ("pip install django")
2. Navigate to the file on your computer that you want to make the project in ("cd [path]")
3. Start the Django project ("django-admin startproject [projectname]")
    - When you open up the created folder, there will be another folder with your project name. This is the core app of the project
4. Then navigate into the project folder ("cd [projectname]")
5. Run the project ("python manage.py runserver")

How do urls.py and views.py work?
1. The browser makes a request to a url (ex: /about)
2. The urls.py file receives and reads the requested url
3. After reading this url, it decides which function to fire in views.py
4. Once the view is determined, the views.py file sends the response to the browser


To bring in HTML templates, create a templates folder that is at the same level as the application.
Create separate html files in the templates folder for each page.
In the views.py page in your app, import the render module. Return a render -- it always takes the request as the first arguement
The second arguement will be the name of the html templates
ALSO, you need to go to the settings.py file, scroll down to the templates section, and add the directory when the templates are found (in the templates folder)

Creating separate apps for different parts of the project:
The "root app" is the app with the same name as the project and is automatically created by django
Splitting the project into separate apps to make clear the different parts of your project is a better organization method
in terminal: "python manage.py startapp articles" --- articles is the name of the app we're adding

When we create a new app, it should have its own urls.py file (that we add) and its own templates folder (we also add)
    Within the templates folder, create another folder with the name of the app (articles in this case)
    This makes it so each app is self contained to make it easier to read

Whenever we create a new app, we need to register the app in the project.
    1. Go to settings.py in the main app
    2. Add the name under the INSTALLED_APPS section
    3. Include app urls in the main application urls.py file

Django Models:
Models in python are a class which represent a table in a database
    - each type of data we have (articles, users, etc) is represented by it's own Models
    - each model mas to a single table in a database
in the code:
    Class Article():
        title = models.CharField()
        body = models.TextField()
each row in the table represents a record.
Models in the code allow us to create new records and store them in the DB table
Make the models in the models.py file. After making the models, you need to do a migration so the model shows in the database table

Migrations:
When we make a model, we have to migrate the model to the DB, then the DB knows to create a table with the right columns
in terminal, run: "python manage.py migrate" (for all the ones pre-made by django)
Every time we want to migrate info, we have to create a migration file
    -To do this, run: "python manage.py makemigrations"
    -Then run: "python manage.py migrate"
Every time we create a model, we have to do these two steps

The Django ORM: (to interact with a DB)
To interact with the db, we open a shell ("python manage.py shell")
From there, we import the Article model ("from articles.models import Article")
To create a new article object, we type: "[name] = Article()"
From there we can set the title (and other attributes): "[name].title = "title" "
To save the article, type: [name].save()
To view all articles we've created, run: "Article.objects.all()"
use control Z (^Z) to exit the shell environment

Django Admin: (control the content of the site)
- create a superuser
    - "python manage.py runserver"
    - create username (kevinbrennan in this case)
    - email: you can add or leave blank. I left blank
    - password: add password (test1234 for this)

If we want models we create to show up in the admin portal, we have to register the models. 
This is done by going to the admin.py file in the app with the model you want to add to admin (articles.admin.py)