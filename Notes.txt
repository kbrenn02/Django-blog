What is Django?
- A web application framework built with Python that allows us to easily create dynamic web apps using Python.
- It helps with all the server side things (requests, authentication, etc.)

Django documentation is also really good and details, with examples and tutorials for many of the answers

1. Make sure django is installed on your computer ("pip install django")
2. Navigate to the file on your computer that you want to make the project in ("cd [path]")
3. Start the Django project ("django-admin startproject [projectname]")
    - When you open up the created folder, there will be another folder with your project name. This is the core app of the project
4. Then navigate into the project folder ("cd [projectname]")
5. Run the project ("python manage.py runserver")

How do urls.py and views.py work?
1. The browser makes a request to a url (ex: /about)
2. The urls.py file receives and reads the requested url
3. After reading this url, it decides which function to fire in views.py
4. Once the view is determined, the views.py file sends the response to the browser


To bring in HTML templates, create a templates folder that is at the same level as the application.
Create separate html files in the templates folder for each page.
In the views.py page in your app, import the render module. Return a render -- it always takes the request as the first arguement
The second arguement will be the name of the html templates
ALSO, you need to go to the settings.py file, scroll down to the templates section, and add the directory when the templates are found (in the templates folder)

Creating separate apps for different parts of the project:
The "root app" is the app with the same name as the project and is automatically created by django
Splitting the project into separate apps to make clear the different parts of your project is a better organization method
in terminal: "python manage.py startapp articles" --- articles is the name of the app we're adding

When we create a new app, it should have its own urls.py file (that we add) and its own templates folder (we also add)
    Within the templates folder, create another folder with the name of the app (articles in this case)
    This makes it so each app is self contained to make it easier to read

Whenever we create a new app, we need to register the app in the project.
    1. Go to settings.py in the main app
    2. Add the name under the INSTALLED_APPS section
    3. Include app urls in the main application urls.py file

Django Models:
Models in python are a class which represent a table in a database
    - each type of data we have (articles, users, etc) is represented by it's own Models
    - each model mas to a single table in a database
in the code:
    Class Article():
        title = models.CharField()
        body = models.TextField()
each row in the table represents a record.
Models in the code allow us to create new records and store them in the DB table
Make the models in the models.py file. After making the models, you need to do a migration so the model shows in the database table

Migrations:
When we make a model, we have to migrate the model to the DB, then the DB knows to create a table with the right columns
in terminal, run: "python manage.py migrate" (for all the ones pre-made by django)
Every time we want to migrate info, we have to create a migration file
    -To do this, run: "python manage.py makemigrations"
    -Then run: "python manage.py migrate"
Every time we create a model, we have to do these two steps

The Django ORM: (to interact with a DB)
To interact with the db, we open a shell ("python manage.py shell")
From there, we import the Article model ("from articles.models import Article")
To create a new article object, we type: "[name] = Article()"
From there we can set the title (and other attributes): "[name].title = "title" "
To save the article, type: [name].save()
To view all articles we've created, run: "Article.objects.all()"
use control Z (^Z) to exit the shell environment

Django Admin: (control the content of the site)
- create a superuser
    - "python manage.py runserver"
    - create username (kevinbrennan in this case)
    - email: you can add or leave blank. I left blank
    - password: add password (test1234 for this)

If we want models we create to show up in the admin portal, we have to register the models. 
This is done by going to the admin.py file in the app with the model you want to add to admin (articles.admin.py)

Template Tags (output dynamic data into our templates using template tags)
- template tags are a way for us to output some python code into an html template (ex: the articles that are made
    are made in python. We render that data in html)

Model methods:
Within models, you can add functions/methods. You do this by declaring "def [name](self):" 
The self implies that it is referencing the article/object itself and allows you to call on other attributes of the self
Then you can call the methods like you would normal python code. In this example, we called the method in the template tag

Static Files & Images: (images, CSS/Javascript files)
- We can't just reference paths in our file, we actually have to embed them
To do this, we need to update the urls.py file in our main app to allow the intake of images via urls
Then go to settings.py, scroll to the bottom and see that we already have a thing for STATIC_URL (and a path to find static files)

Extending Templates:
- Extending a base template (that has all the global stuff) in individual templates allows you to make changes that will
then be covered through the whole website
- need to have a 'block' tag in the individual templates as well as the 'extends' tab

URL parameters:
Need to add to the urls.py file in articles to note in the url where we are going
Every article has a slug when it's made, so we can capture that with: path(r'<slug:slug>/', views.article_detail)
    and using views.article_detail we can display what we capture so we know we're on the right track

Named URLs:
Make it so when we click on a link for an article, it goes to the right link
To add a name to a URL, add a third parameter to the urls in the urlpatterns array in urls.py with ", name='' "
The name can then be used dynamically in our html files

Article detail template:
Uploading Media: 

Accounts App: (to allow users to login in on the front end and create profiles)
Django has a lot of this functionality already built into it, so we just need to create an accounts app
Like with other apps, follow the same process of:
1. python manage.py startapp [name]
2. log the app in the settings.py file under INSTALLED_APPS
3. create a urls.py file in the new app

User Creation Form: (allow user to create an account)
- we could create the html form from scratch, but django comes with a lot of built in functionality for authentication
    (one of these things is a user creation form that comes with form hints and validation)
    Import the user creation form in the views.py file in the accounts app

Saving users to the DB:
We want to take the data provided in the user creation form and actually create a user
We do this by updating the view that was made for signups. Basically, when a user completes the form, we are sending a request
    to the signup view again, so we had to edit it to act differently if between being a GET request and a POST request
test account:
kevin-testaccount
tEsT1S3#

Login Form:
In the same accounts.urls.py file, create a url path for login (you'll also have to create a view)

Logging users in (after signup or login):
import the login file into the views file
login(request, user)

Logging users out:
create a logout function in the views.py file that contains a call to the django logout function (from django.contrib.auth import logout)
Pass the request into the django logout function.
Create a logout button on the base template so it shows on all pages

Protecting pages to only allow logged in users to access:
Add a decorator to the top of the function (in views.py) you are trying to protect from non-logged in users
We added a decorator so the user needs to be logged in to create an article. If they aren't, it sends them to the login page
    We need to make it so that going from the create page to the login page, after logging in it goes back to create page
    Basically, we need Django to keep track of where we've been so it knows to send us to the right place

Redirect users after login:
We can see in the url of the login page when we go to /articles/create and we're not logged in, that there is the string:
?next=/articles/create
This is our website saying that that is probably where we want to go next. The trick is, how do we capture that
We can use the .get property on the reqeust object to access the ?next= variable

Model Forms:
To create model forms, in the articles folder, we created the file forms.py
    In the forms.py file, from django import forms and from . import models (so we can use the models we made in models.py)
    We have to create a new class which represents our form
    Create the Meta class to decide which data from the model we want to show/we want access too
    Once the form is created, import the form (from . import forms) to the articles.views.py
    The purpose of this is so when we create a new article on the front end (instead of the admin portal), we
    have all the information we need (or at least make sure to ask for it)
    When the user submits the form, it sends to the original URL. So now we have to update the views.py file to handle 
    a POST request and save the form data to the DB

Foreign Keys:
Our Article model doesn't have an author component. So we can add the author using the foreign key variable
If we set our foreign key to User, it means the author needs to be one of the users (there's a dropdown in the backend)
But on the front end, we want the author to be automatically associated with whomever wrote the article

Checking login status:
If we're logged out, we should see a login button. If we're logged in, we should see a log out and maybe create article button
We need our site to know the login status (detect if user is authenticated)
We can do this by using an if statement in our base_layout.html file with user.is_authenticated

Redirecting to the homepage:

